#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Structure to hold player data
typedef struct {
    char name[20];      // Name of the player
    int health;         // Health points of the player
    int attackPower;    // Attack power of the player
} Player;

// Function prototypes
void attack(Player *attacker, Player *defender, int damage); // Perform an attack
void playerTurn(Player *player, Player *enemy);              // Player's turn logic
void computerTurn(Player *computer, Player *player);         // Computer's turn logic

int main() {
    srand(time(NULL));  // Seed the random number generator with current time

    // Initialize player and computer with names, health, and attack power
    Player player = {"Player", 100, 10};
    Player computer = {"Computer", 100, 10};

    // Display welcome message
    printf("\n=== Turn-Based Battle Game ===\n");
    printf("Get ready for battle!\n");

    // Main game loop - runs as long as both players are alive
    while (player.health > 0 && computer.health > 0) {
        playerTurn(&player, &computer); // Player's turn
        if (computer.health <= 0) break; // Check if computer is defeated
        computerTurn(&computer, &player); // Computer's turn
    }

    // Announce the result based on who survived
    if (player.health > 0) {
        printf("\nVictory! You defeated the computer!\n");
    } else {
        printf("\nDefeat... The computer won.\n");
    }

    return 0;
}

// Function to perform an attack and update the defender's health
void attack(Player *attacker, Player *defender, int damage) {
    defender->health -= damage;  // Subtract damage from defender's health
    if (defender->health < 0) defender->health = 0;  // Prevent negative health
    printf("%s hits %s for %d damage! (%s HP: %d)\n", 
           attacker->name, defender->name, damage, 
           defender->name, defender->health);
}

// Function to handle player's turn
void playerTurn(Player *player, Player *enemy) {
    int choice;
    // Display player's options
    printf("\nYour move! Choose an action:\n");
    printf("1. Normal Attack\n");
    printf("2. Special Attack (Risky, high damage)\n");
    printf("3. Heal (Recover 20 HP)\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    // Perform action based on player's choice
    if (choice == 1) {
        attack(player, enemy, (rand() % player->attackPower) + 1);
    } else if (choice == 2) {
        // Special attack: 50% chance to hit with higher damage
        if (rand() % 2 == 0) {
            printf("Special Attack missed!\n");
        } else {
            attack(player, enemy, (rand() % (player->attackPower * 2)) + 5);
        }
    } else if (choice == 3) {
        // Heal action: Increase player's health by 20, max at 100
        player->health += 20;
        if (player->health > 100) player->health = 100;
        printf("%s heals up! (+20 HP, Current: %d)\n", player->name, player->health);
    } else {
        // Invalid input handling
        printf("Invalid choice. You missed your turn!\n");
    }
}

// Function to handle computer's turn
void computerTurn(Player *computer, Player *player) {
    int choice = rand() % 3 + 1;  // Randomly choose an action
    printf("\nComputer's turn...\n");
    // Computer action based on random choice
    if (choice == 1) {
        attack(computer, player, (rand() % computer->attackPower) + 1);
    } else if (choice == 2) {
        // Special attack: 50% chance to hit with higher damage
        if (rand() % 2 == 0) {
            printf("Computer's Special Attack missed!\n");
        } else {
            attack(computer, player, (rand() % (computer->attackPower * 2)) + 5);
        }
    } else {
        // Heal action: Increase computer's health by 20, max at 100
        computer->health += 20;
        if (computer->health > 100) computer->health = 100;
        printf("Computer recovers health! (+20 HP, Current: %d)\n", computer->health);
    }
}
