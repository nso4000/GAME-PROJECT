#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Class types for the player
typedef enum {
    WARRIOR,
    MAGE,
    ROGUE
} Class;

// Structure for Player
typedef struct {
    char name[20];      // Name of the player
    int health;         // Health points of the player
    int attackPower;    // Attack power of the player
    Class classType;    // Class type
} Player;

// Function declarations
void attack(Player *attacker, Player *defender, int damage); // Perform an attack
void playerTurn(Player *player, Player *enemy);              // Player's turn logic
void computerTurn(Player *computer, Player *player);         // Computer's turn logic

// Get class name as string
const char* getClassName(Class c) {
    switch (c) {
        case WARRIOR: return "Warrior";
        case MAGE: return "Mage";
        case ROGUE: return "Rogue";
        default: return "Unknown";
    }
}

int main() {
    srand(time(NULL));  // Random number generator with current time

    // Ask player to choose a class
    int classChoice;
    printf("Choose your class:\n");
    printf("1. Warrior (High HP, lower attack)\n");
    printf("2. Mage (Low HP, high attack)\n");
    printf("3. Rogue (Balanced stats)\n");
    printf("Enter your choice: ");
    scanf("%d", &classChoice);

    Player player;
    switch (classChoice) {
        case 1:
            player = (Player){"Player", 120, 8, WARRIOR};
            break;
        case 2:
            player = (Player){"Player", 80, 15, MAGE};
            break;
        case 3:
        default:
            player = (Player){"Player", 100, 10, ROGUE};
            break;
    }

    // Set computer as a generic balanced fighter
    Player computer = {"Computer", 100, 10, WARRIOR};

    printf("\n=== Turn-Based Battle Game ===\n");
    printf("You chose class: %s\n", getClassName(player.classType));
    printf("Get ready for battle!\n");

    // Runs as long as both players are alive
    while (player.health > 0 && computer.health > 0) {
        playerTurn(&player, &computer); // Player's turn
        if (computer.health <= 0) break; // Check if computer is defeated
        computerTurn(&computer, &player); // Computer's turn
    }

    // Announce the result based on who survived
    if (player.health > 0) {
        printf("\nVictory! You defeated the computer!\n");
    } else {
        printf("\nDefeat... The computer won.\n");
    }

    return 0;
}

// Function to perform an attack and update the defender's health
void attack(Player *attacker, Player *defender, int damage) {
    defender->health -= damage;  // Subtract damage from defender's health
    if (defender->health < 0) defender->health = 0;  // Prevent negative health
    printf("%s hits %s for %d damage! (%s HP: %d)\n", 
           attacker->name, defender->name, damage, 
           defender->name, defender->health);
}

// Function to handle player's turn
void playerTurn(Player *player, Player *enemy) {
    int choice;
    // Display player's options
    printf("\nYour move! Choose an action:\n");
    printf("1. Normal Attack\n");
    printf("2. Special Attack (Risky, high damage)\n");
    printf("3. Heal (Recover 10 HP)\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    // Perform action based on player's choice
    if (choice == 1) {
        attack(player, enemy, (rand() % player->attackPower) + 1);
    } else if (choice == 2) {
        // Special attack: 50% chance to hit with higher damage
        if (rand() % 2 == 0) {
            printf("Special Attack missed!\n");
        } else {
            attack(player, enemy, (rand() % (player->attackPower * 2)) + 5);
        }
    } else if (choice == 3) {
        // Heal action: Increase player's health by 10, max at 100 (or class max)
        player->health += 10;
        if (player->health > 120) player->health = 120; // Max for Warrior class
        printf("%s heals up! (+10 HP, Current: %d)\n", player->name, player->health);
    } else {
        // Invalid input handling
        printf("Invalid choice. You missed your turn!\n");
    }
}

// Function to handle computer's turn
void computerTurn(Player *computer, Player *player) {
    int choice = rand() % 3 + 1;  // Randomly choose an action
    printf("\nComputer's turn...\n");
    // Computer action based on random choice
    if (choice == 1) {
        attack(computer, player, (rand() % computer->attackPower) + 1);
    } else if (choice == 2) {
        // Special attack: 50% chance to hit with higher damage
        if (rand() % 2 == 0) {
            printf("Computer's Special Attack missed!\n");
        } else {
            attack(computer, player, (rand() % (computer->attackPower * 2)) + 5);
        }
    } else {
        // Heal action: Increase computer's health by 10, max at 100
        computer->health += 10;
        if (computer->health > 100) computer->health = 100;
        printf("Computer recovers health! (+10 HP, Current: %d)\n", computer->health);   
    }
}
